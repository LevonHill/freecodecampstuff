/*tep 5
In order to better visualize how your elements are sized, adding a border can be helpful.

Give your .gallery element a width of 50% and a border set to 5px solid red.

Then give your img elements a width of 100%, padding set to 5px, and a border set to 5px solid blue.


important 

Notice how the blue image border extends beyond the red gallery border. 
This is due to the way browsers calculate the size of container elements.

The box-sizing property is used to set this behavior.
By default, the content-box model is used. With this model, when an element has a specific width, that width is calculated based only on the element's content. Padding and border values get added to the total width, so the element grows to accommodate these values.

Try setting box-sizing to content-box explicitly, with the global
 * selector. At this point, you will not see any changes, because you are using the default value.
 
 
 
 
 
 The border-box sizing model does the opposite of content-box. 
 The total width of the element, including padding and border, will be the explicit width set. The content of the element will shrink to make room for the padding and border.

Change the box-sizing property to border-box.
 Notice how your blue image borders now fit within your red gallery border.*/

* ,*::after, *::before{
    box-sizing: border-box;
}
body{
    font-family: sans-serif;
    background-color: #f5f6f7;
    margin: 0;
}
/*Now your images are too big.

Create a .gallery img selector to target them. Give them all a width of 100% and a max-width of 350px.

Also set the height property to 300px to keep your images a uniform size.

Flexbox is a one-dimensional CSS layout that can control the way items are 
spaced out and aligned within a container.

To use it, give an element a display property of flex.
 This will make the element a flex container. Any direct children of a flex container are called flex items.

Create a .gallery selector and make it a flex container.




Flexbox has a main and cross axis. The main axis is defined by the flex-direction property, which has four possible values:

row (default): horizontal axis with flex items from left to right
row-reverse: horizontal axis with flex items from right to left
column: vertical axis with flex items from top to bottom
column-reverse: vertical axis with flex items from bottom to top



The flex-wrap property determines how your flex items behave when the flex container is too small.
 Setting it to wrap will allow the items to wrap to the next row or column. nowrap (default) 
 will prevent your items from wrapping and shrink them if needed
 
 
 IMPORTANT!
  Notice how some of your images have become distorted. 
 This is because the images have different aspect ratios. 
 Rather than setting each aspect ratio individually, 
 you can use the object-fit property to determine how images should behave.
Give your .gallery img selector the object-fit property and set it to cover. This will tell the image to fill the img container while maintaining aspect ratio, resulting in cropping to fit..


Your images need some space between them.

The gap CSS shorthand property sets the gaps, also known as gutters,
 between rows and columns. 
 The gap property and its row-gap and column-gap sub-properties provide this functionality for flex, grid, and multi-column layout.
  You apply the property to the container element.

Give your .gallery flex container a gap property with 16px as the value.
*/

.gallery{
display: flex;
flex-direction: row;
flex-wrap: wrap;
justify-content:center ;
align-items: center;
padding: 20px 10px;
max-width: 1400px;
margin: 0 auto;
gap: 16px;
}

/*The ::after pseudo-element creates an element that is the last child of the selected element.
 You can use it to add an empty element after the last image.
  If you give it the same width as the images it will push the last image to the left when the gallery is in a two-column layout. 
Right now, it is in the center because you set justify-content: center on the flex container*/
.gallery::after{
    content: "";
    width: 350px;
}

.gallery img{
    width: 100%;
    max-width: 350px;
    height: 300px;
    object-fit: cover;
    border-radius: 10px;
}
.header{
    text-align: center;
    text-transform: uppercase;
    padding: 32px;
    background: #0a0a23;
    color: #fff;
    border-bottom: 4px solid #fdb347 ;
}