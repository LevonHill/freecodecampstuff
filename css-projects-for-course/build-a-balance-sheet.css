/*Time to style your table. Start by resetting the box model. 
Create an html selector and give it a box-sizing property set to border-box.

Before you get too far into your styling, 
you should make use of the sr-only class. 
You can use CSS to make elements with this class completely hidden from the visual page,
 but still be announced by screen readers.
 The CSS you are about to write is a common set of properties used to ensure elements 
 are completely hidden visually.

 he CSS clip property is used to define the visible portions of an element. Set the span[class~="sr-only"]
  selector to have a clip property of rect(1px, 1px, 1px, 1px).

The clip-path property determines the shape the clip property should take.
 Set the clip-path property to the value of inset(50%),
 forming the clip-path into a rectangle within the element.

*/

html{
    box-sizing: border-box;
}
body{
    font-family: sans-serif;
    color: #0a0a23;
}

/*Rather than having to constantly double-check you are not overwriting your earlier properties, 
you can use the !important keyword to ensure these properties are always applied,
 regardless of order or specificity.*/
span[class~="sr-only"]{
    border: 0 !important;
    clip-path: inset(50%) !important;
    clip: rect(1px,1px,1px,1px)!important;
    width: 1px !important;
    height: 1px !important;
    overflow: hidden !important;
    white-space: nowrap !important;
    position: absolute !important;
    padding: 0 !important;
    margin: -1px !important;
    
}
h1{
    max-width: 37.25rem;
    margin: 0 auto;
    padding: 1.5rem 1.25rem;

}
h1 .flex{
    display: flex;
    flex-direction: column-reverse;
    gap: 1rem;
}
h1 .flex span:first-of-type{
    font-size: 0.7em;
}
h1 .flex span:last-of-type{
    font-size: 1.2em;
}


/*You wrapped your table in a section element - 
now you can style that to give your table a border.

The calc() function is a CSS function that allows you to calculate a value based on other values.
For example, you can use it to calculate the width of the viewport minus the margin of an element


Adding position sticky moved the element into its own stack. To ensure your #years element does not 
get hidden by different stacks,
 add a z-index property set to 999 in the #years rule.*/
section{
    max-width: 40rem;
    margin: 0 auto;
    border: 2px solid #d0d0d5;
}

#years{
    display: flex;
    justify-content:flex-end;
    position: sticky;
    top: 0;
    color: #fff;
    background: #0a0a23;
    margin: 0 -2px;
    padding: 0.5rem calc(1.25rem + 2px)0.5rem 0;
    z-index: 999;
}
#years span[class]{
font-weight: bold;
width: 4.5rem;
text-align: right;
}
.table-wrap{
    padding: 0 0.75rem 1.5rem 0.75rem;

}


/*The :not() pseudo-selector is used to target all elements that do not match the selector  
-in this case, any of your span elements that do not have the sr-only class. 
This ensures that your earlier rules for the span[class~="sr-only"] selector are not overwritten.


Rather than having to constantly double-check you are not overwriting your earlier properties, 
you can use the !important keyword to ensure these properties are always applied, 
regardless of order or specificity.*/
span:not(.sr-only){
    font-weight: normal;
}

/*Set the border-collapse property to collapse, which will allow cell borders to collapse 
into a single border, instead of a border around each cell. 
Also set the border property to 0 to hide the borders themselves.*/
table{
    border-collapse: collapse;
    border: 0;
    width: 100%;
    margin-top: 3rem;
    position: relative;

}
table caption{
color:#356eaf;
font-size: 1.3em;
font-weight: normal;
position:  absolute;
top: -2.25rem;
left: 0.5rem;
}

/*This approach ensures that the width is fixed, 
whereas setting width specifically would allow the elements to shrink to the container.*/
tbody td{
    width: 100vw;
    max-width: 4rem;
    min-width: 4rem;
}

tbody th{
    width: calc(100% - 12rem);
}

/*The [attribute="value"] selector targets any element that has an attribute with a specific value. 
Create a tr[class="total"] selector to target specifically your tr elements with the total class.*/
tr[class="total"]{
    border-bottom: 4px double #0a0a23;
    font-weight: bold;
}
tr[class="total"] th{
    text-align: left;
    padding: 0.5rem 0 0.25rem 0.5rem;
}

/*The key difference between tr[class="total"] and 
tr.total is that the first will select tr elements where the only class is total. 
The second will select tr elements where the class includes total


The :nth-of-type() pseudo-selector is used to target specific elements based on their order among siblings of the same type.
 Use this pseudo-selector to target the third td element within your total table rows. 
 Give it a right padding of 0.5rem.*/

tr.total td{
text-align: right;
padding: 0 0.25rem;
}
tr.total td:nth-of-type(3){
    padding-right: 0.5rem;
}
tr.total:hover{
    background: #99c9ff;
}
td[class="current"]{
    font-style: italic;
}

tr.data{
    background: linear-gradient(to bottom,#dfdfe2 1.845rem, white 1.845rem);
}
tr.data th{
    text-align:  left;
    padding-top: 0.3rem;
    padding-left: 0.5rem;
}
tr.data th .description{
    display: block;
    padding: 1rem 0 0.75rem;
    margin-right: -13.5rem;
    font-style: italic;
    font-weight: normal;
}


/*our dollar amounts are currently misaligned. 
Create a selector to target the td elements within your tr.data elements. 
Vertically align the text to the top, horizontally align the text to the right, and set the padding*/
tr.data td{
    vertical-align: top;
    text-align: right;
    padding: 0.3rem 0.25rem 0;
}
tr.data td:last-of-type{
padding-right: 0.5rem;
}