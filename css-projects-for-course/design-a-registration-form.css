/*In the previous lecture videos, you learned how to work with viewport units.

Remember that the vh unit stands for viewport height, and is equal to 1% of the height of the viewport. This makes it relative to the viewport height.

It is time to spruce the project up with some CSS. Begin by giving the body a width of 100%, and a height of 100vh.


Now, get rid of the horizontal scroll-bar, by setting the body default margin added by some browsers to 0

Step 5
That is better. Now, make the background easy on the eyes, by changing the background-color of body to #1b1b32. Then, to see the text, change the color to #f5f6f7.



Step 11
In the previous lecture videos, you learned how to work with rem units. Remember that rem unit stands for root em, and is relative to the font size of the html element.

As label elements are inline by default, they are all displayed side by side on the same line, making their text hard to read.

To make them appear on separate lines, add display: block to the label element, and add a margin of 0.5rem 0, to separate them from each other.


During development, it is useful to see the fieldset default borders. 
However, they make the content appear too separated.
Remove the border, and add 2rem of padding only to the top and bottom of each fieldset.
 Be sure to remove the padding from the left and right.

*/
body{
    font-family: Tahoma;
    font-size: 16px;
    width: 100%;
    height: 100vh;
    margin: 0;
    background-color: #1b1b32;
    color: #f5f6f7;
}
h1, p{
margin: 1em auto;
text-align: center;
}
form {
margin: 0 auto;
max-width: 500px;
min-width: 300px;
width: 60vw;
padding-bottom: 2em;
}


label{
    display: block;
    margin: 0.5rem 0;
}

/*To give the fieldset elements a bit of separation, 
select them and give them a border-bottom of 3px solid #3b3b4f.*/
fieldset{
    border: none;
    padding: 2rem 0;
    border-bottom: 3px solid #3b3b4f;
}
fieldset:last-of-type{
    border-bottom:none;
}

/*It would be nicer to have the label text appear above the form elements.

Select all input, textarea, and select elements, and make them take up the full width of their parent elements.

Also, add 10px of margin to the top of the selected elements. Set the other margins to 0.*/

input, textarea, select{
    width: 100%;
    margin:10px 0 0 0;
    min-height: 2em;
}


/*For the second fieldset, you want the input and label text to appear on the same line.
Start, by giving the input elements in the second fieldset a class of inline.


Select only the .inline elements,
 and give them width of unset. This will remove the earlier rule which set all the input elements to width: 100%.
*/
.inline{
  width: unset;
 margin-right: 0.5em;
   margin-top:0;
   margin-bottom:0;
   margin-left:0;
   vertical-align: middle;
   background-color: #0a0a23 1px solid;
}
input,textarea{
background-color: #0a0a23;
border:1px solid #0a0a23;
color: #ffffff;
}

/*You want the select element to remain with a white background, 
but now it is not getting the same min-height as the input and textarea elements.
Move the min-height property and value so that all three element types have the same min-height value,
 and the select element still has a white background.
 
 To style the submit button, you can use an attribute selector, which selects an element based on the given attribute value. 
 
 */
 input[type="submit"]{
    display:block;
    width:60%;
    min-width: 300px;
    margin: 1em auto;
    height: 2em;
    font-size: 1.1rem;
    background-color: #3b3b4f;
  border-color:white;
 }

 /*Most browsers inject their own default CSS properties and values for different elements.
  If you look closely, you might be able to notice the file input is smaller than the other text input elements. 
 By default, a padding of 1px 2px is given to input elements you can type in.*/

 input[type="file"]{
    padding: 1px 2px;
 }

 a{
    color: #dfdfe2;
 }